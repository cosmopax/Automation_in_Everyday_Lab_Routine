{% extends "content-page.jinja"%}

{% block content %}

<script type="text/javascript">
    /**
    * Logs the given `msg` to the log at the bottom of the site
    */
    function logtosite(msg){
        $('#log').prepend(`<tt>${msg}</tt><br>`);
    }

    
    


    $(document).ready(function(){
        logtosite('document ready, connecting to device...');
        
        const socket = io();

        var added_amounts = [0];
        var pH_data = [0];

        pH_chart = new Chart($('canvas#phmeter-chart'), {
            type: "line",
            data: {
                datasets: [
                    {
                        label: "pH readout",
                        data: [0, 1, 2, 3, 4, 5, 6],
                        borderWidth: 1,
                        fill: false,
                        tension: 0.1,
                    }
                ]
            }

        });

        socket.on('phmeter', function(msg) {
            $('input#indicator-amountadded').val(msg['volume_added']);
            $('input#indicator-pH').val(msg['pH']);
            added_amounts.push(Number(msg['volume_added']));
            pH_data.push(Number(msg['pH']));
            pH_chart.data.labels = added_amounts;
            pH_chart.data.datasets[0].data = pH_data;
            pH_chart.update();
            logtosite(`Device response, current pH ${msg['pH']}`)
        });

        $('form#titrate').submit(function(event) {
            logtosite('Sending titrate request: ' + $('#add-value').val() + 'mL');
            socket.emit('phmeter', {action: "add_volume", volume: $('#add-value').val()});
            console.log("emitted titration request")
            return false;
    });
        $('form#reset').submit(function(event) {
            logtosite('Resetting instrument...');
            added_amounts = [0];
            pH_data = [0];
            socket.emit('phmeter', {action: "reset"});
            return false;
    });

        /** poll every second for device state */
        setInterval(() => {
            socket.emit("phmeter", {action: "poll"});
            return false;
        }, 1000)

        

    })



</script>
<h1>pH Meter Instrument Control</h1>

<p>Task X.17: The Full-Stack Instrument Controller and Data Visualizer
<ul>
    <li>Core Objective: Create a full-stack, closed-loop system where a web interface controls a virtual instrument, and the data from that instrument is sent back and plotted on the web interface in real-time.</li>
    <li>Relevant OS-MLA Module(s): System Architecture, Lab Equipment APIs, GUI Development.</li>
    <li>Standalone Deliverable: A multi-component application. A virtual_pH_meter.py script simulates pH changes over time and sends updates via WebSocket. A main_server.py runs the web server and manages WebSocket connections. An index.html page provides buttons to "start" and "stop" the experiment and a chart that updates live with the pH data received from the server.</li>
</ul>

</p>

<div class="mb-3">



    <div class="row">
        <div class="col-md-8" id="chart">
            <canvas id="phmeter-chart">
            </canvas>
        </div>
        <div class="col-md-4" id="controls">
                <form id="titrate" action="#">
                <div class="mb-3">
                    <label class="form-label" for="indicator-amountadded">Amount added:</label>
                    <div class="input-group mb-3">
                        
                        <input class="form-control" type="text" id="indicator-amountadded" placeholder="awaiting instrument response" disabled>
                        <span class="input-group-text" id="addon-ml1">mL</span>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="indicator-pH">Current pH readout:</label>
                    <input class="form-control" type="text" id="indicator-pH" placeholder="awaiting instrument response" disabled>
                </div>

            <div class="mb-3">
                    <label class="form-label" for="add-value">Titration controls:</label>
                    <div class="input-group mb-3">
                        
                        <input class="form-control" type="number" step="0.01" class="form-control" value="0" id="add-value">
                        <span class="input-group-text" id="addon-ml2">mL</span>
                    </div>
                    
                    <input type="submit" class="btn btn-success mt-3 w-100" value="Add Titer" id="add-submit">
                    </form>
                    <form action="#" id="reset">
                    <input type="submit" class="btn btn-danger mt-3 w-100" value="Reset" id="add-submit">
                
            </div>
            </form>
        </div>



<div id="log" class="mt-3" style="height:20rem; overflow-y:scroll;"></div>
{% endblock %}